# -*- coding: utf-8 -*-
# @Author: liuli
# @Date:   2017-03-15 23:28:39
# @Last Modified by:   XUEQUN
# @Last Modified time: 2017-07-13 17:01:34
import os,time
from os import path
import datetime,json
from sqlalchemy import func
from flask import (render_template,
                   Blueprint,
                   redirect,
                   url_for,
                   abort,
                   flash,
                   request)
from flask_login import login_required, current_user
from flask_principal import Permission, UserNeed

from webapp.models import db,User,Project,Charge_info,Charge_statics
from webapp.forms import CommentForm, PostForm
from ..utils import wangsustatics,fastwebstatics
from ..utils.pro import project_http,project_https

cdn_blueprint = Blueprint(
    'cdn',
    __name__,
    template_folder=path.join(path.pardir,'templates','cdn'),
    url_prefix="/cdn"
    )

def dateformat(value, format="%Y-%m"):
    return value.strftime(format)


#download_type分为http和https两种
#download_domian分为project_http.domain和project_https.domain两种
#fastweb只有http一种类型，而wangsu有http和https两种类型
def insert_data(cname,year,month,download_type=None,download_domain=None):
    if cname =='fastweb':
        os.chdir('/usr/local/src/myproject/cdnadmin/webapp/utils')
        _rt_statics,total_money = fastwebstatics.get_statics_result(year,month)
    elif cname == 'wangsu' and download_type=='http':
        _rt_statics = wangsustatics.get_traffic_result(myflag=download_type,mydomain=project_http.domain,year=year,month=month)
    elif  cname == 'wangsu' and download_type=='https':
        _rt_statics = wangsustatics.get_traffic_result(myflag=download_type,mydomain=project_https.domain,year=year,month=month)
    for val in _rt_statics:
        new_comment = Charge_statics()
        new_comment.charge_date = datetime.datetime.now().strptime(val[0],"%Y-%m")
        new_comment.charge_cname = val[1]
        new_comment.charge_type = val[2]
        new_comment.charge_project = val[3]
        new_comment.charge_area = val[4]
        new_comment.charge_traff = val[5]
        new_comment.charge_total = val[6]
        new_comment.charge_percent = val[7]

        db.session.add(new_comment)
        db.session.commit()

def get_current_user():
    try:
        cur_user = current_user.username
    except Exception as e:
        flash(u"请先登录!")
        return  redirect(url_for('main.login'))
    else:
        user = User.query.filter_by(
        username=cur_user
    ).one()
        return user

    #price=Charge_info.query.filter_by(nick_name='cn').filter_by(charge_cname='网宿').filter_by(charge_type='下载加速').all()[0].charge_price
    #return prices

@cdn_blueprint.route('/')
def home():
    cur_user = get_current_user()
    print cur_user
    return render_template('dashboardshow.html',login_user=cur_user.username)

@cdn_blueprint.route('/logout/')
def logout():
    return  redirect(url_for('main.logout'))

@cdn_blueprint.route('/custom/')
def custom():
    cur_user = get_current_user()
    #insert_wangsu()
    #insert_data('wangsu',2017,6,download_type='http',download_domain=project_http.domain)
    return render_template('custom.html',login_user=cur_user.username,price='successed!')


@cdn_blueprint.route('/dashboard/')
def dashboard():
    cur_user = get_current_user()
    #print cur_user
    project_client_wangsu = ['剑一','剑二','剑三','剑世','月影','猎魔','春秋','封神一','反恐行动','蜂鸟','麻辣江湖']
    project_client_fastweb = ['剑一','剑三','剑世','月影','反恐行动']
    project_legend_client_wangsu = []
    project_legend_phone_wangsu = []
    project_legend_wangsu = []
    project_legend_fastweb = []

    status_data_wangsu_6 = []
    status_data_wangsu_5 = []
    status_data_fastweb_5 = []
    status_data_fastweb_6 = []

    status_data_wangsu_client_5 = []
    status_data_wangsu_client_6 = []

    status_data_wangsu_phone_5 = []
    status_data_wangsu_phone_6 = []

    charge_statics_5 = db.session.query(Charge_statics.charge_date.label('charge_date'),Charge_statics.charge_cname.label('charge_cname'),Charge_statics.charge_project.label('charge_project'),func.sum(Charge_statics.charge_total)).filter_by(charge_date='2017-05-01 00:00:00').filter_by(charge_cname='网宿').group_by(Charge_statics.charge_project).all()
    charge_statics_fastweb_5 = db.session.query(Charge_statics.charge_date.label('charge_date'),Charge_statics.charge_cname.label('charge_cname'),Charge_statics.charge_project.label('charge_project'),func.sum(Charge_statics.charge_total)).filter_by(charge_date='2017-05-01 00:00:00').filter_by(charge_cname='快网').group_by(Charge_statics.charge_project).all()
    for p in charge_statics_5:
        if p[3]==0:continue
        status_data_wangsu_5.append(p[3])
    for f in charge_statics_fastweb_5:
        for j in project_client_fastweb:
            if f[2] == j:
                project_legend_fastweb.append(f[2])
                status_data_fastweb_5.append(f[3])
    for k in charge_statics_5:
        for x in project_client_wangsu:
            if k[2] == x:
                project_legend_client_wangsu.append(k[2])
                status_data_wangsu_client_5.append(k[3])
        if k[2] in project_client_wangsu:
            continue
        else:
            project_legend_phone_wangsu.append(k[2])
            status_data_wangsu_phone_5.append(k[3])

    charge_statics_6 = db.session.query(Charge_statics.charge_date.label('charge_date'),Charge_statics.charge_cname.label('charge_cname'),Charge_statics.charge_project.label('charge_project'),func.sum(Charge_statics.charge_total)).filter_by(charge_date='2017-06-01 00:00:00').filter_by(charge_cname='网宿').group_by(Charge_statics.charge_project).all()
    charge_statics_fastweb_6 = db.session.query(Charge_statics.charge_date.label('charge_date'),Charge_statics.charge_cname.label('charge_cname'),Charge_statics.charge_project.label('charge_project'),func.sum(Charge_statics.charge_total)).filter_by(charge_date='2017-06-01 00:00:00').filter_by(charge_cname='快网').group_by(Charge_statics.charge_project).all()

    for f in charge_statics_fastweb_6:
        for j in project_client_fastweb:
            if f[2] == j:
                status_data_fastweb_6.append(f[3])
    for p in charge_statics_6:
        if p[3]==0:continue
        project_legend_wangsu.append(p[2])
        status_data_wangsu_6.append(p[3])
    for k in charge_statics_6:
        for x in project_client_wangsu:
            if k[2] == x:
                status_data_wangsu_client_6.append(k[3])
        if k[2] in project_client_wangsu:
            continue
        else:
            status_data_wangsu_phone_6.append(k[3])
    return render_template('dashboard.html',login_user=cur_user.username,
        project_legend_wangsu=json.dumps(project_legend_wangsu),status_data_wangsu_5=json.dumps(status_data_wangsu_5),status_data_wangsu_6=json.dumps(status_data_wangsu_6),
        project_client_wangsu=json.dumps(project_legend_client_wangsu),status_data_wangsu_client_5=json.dumps(status_data_wangsu_client_5),status_data_wangsu_client_6=json.dumps(status_data_wangsu_client_6),
        project_legend_phone_wangsu=json.dumps(project_legend_phone_wangsu),status_data_wangsu_phone_5=json.dumps(status_data_wangsu_phone_5),status_data_wangsu_phone_6=json.dumps(status_data_wangsu_phone_6),
        project_legend_fastweb=json.dumps(project_legend_fastweb),status_data_fastweb_5=json.dumps(status_data_fastweb_5),status_data_fastweb_6=json.dumps(status_data_fastweb_6)

        )

@cdn_blueprint.route('/dashboard/<int:year>/<int:month>/', methods=('GET', 'POST'))
def dashboardshow(year,month):
    cur_user = get_current_user()
    rt_list = []
    select_time = '%s-%s-01 00:00:00' %(year,month)
    #distinct_date_list = db.session.query(func.distinct(Charge_statics.charge_date)).all()
    distinct_cname_list = db.session.query(func.distinct(Charge_statics.charge_cname)).all()
    #for d in distinct_date_list:
    for c in distinct_cname_list:
        charge_statics = db.session.query(Charge_statics.charge_date.label('charge_date'),Charge_statics.charge_cname.label('charge_cname'),Charge_statics.charge_project.label('charge_project'),func.sum(Charge_statics.charge_total)).filter_by(charge_date=select_time).filter_by(charge_cname=c[0]).group_by(Charge_statics.charge_project).all()
        rt_list.extend(charge_statics)
    _is_ok=True

    return render_template('dashboardshow.html',login_user=cur_user.username,year=year,month=month)
    #return json.dumps({'is_ok':True, "error":u'success'})

@cdn_blueprint.route('/tables/')
def tables():
    cur_user = get_current_user()
    #price = get_price()
    charge_statics = Charge_statics.query.all()
    return render_template('table.html',login_user=cur_user.username,price=charge_statics)
    #os.chdir('/usr/local/src/myproject/cdnadmin/webapp/utils')
    #with open('fastwebstaticsresult.txt') as f:
    #    rt=f.readlines()
    #    _rt_statics,total_money = eval(rt[0])
    #return render_template('table.html',login_user=cur_user.username,statics=_rt_statics)

@cdn_blueprint.route('/tablestotal/')
def tablestotal():
    cur_user = get_current_user()
    rt_list = []
    distinct_date_list = db.session.query(func.distinct(Charge_statics.charge_date)).all()
    distinct_cname_list = db.session.query(func.distinct(Charge_statics.charge_cname)).all()
    for d in distinct_date_list:
        for c in distinct_cname_list:
            charge_statics = db.session.query(Charge_statics.charge_date.label('charge_date'),Charge_statics.charge_cname.label('charge_cname'),Charge_statics.charge_project.label('charge_project'),func.sum(Charge_statics.charge_total)).filter_by(charge_date=d[0]).filter_by(charge_cname=c[0]).group_by(Charge_statics.charge_project).all()
            rt_list.extend(charge_statics)
    return render_template('tabletotal.html',login_user=cur_user.username,prices=rt_list)


@cdn_blueprint.route('/tablestatics/',methods=['GET'])
def tablestatics():
    cur_user = get_current_user()
    project = request.args.get('myproject','')
    mydate =  request.args.get('mydate','')
    mycname = request.args.get('mycname','')
    rt_area = []
    rt_result = []

    #print project,mydate
    rt = Charge_statics.query.filter_by(charge_project=project).filter_by(charge_date=mydate).filter_by(charge_cname=mycname).all()
    for x in rt:
        rt_total = {}
        rt_area.append(x.charge_area)
        rt_total['value']=x.charge_total
        rt_total['name']=x.charge_area
        rt_result.append(rt_total)
    return render_template('tablestatics.html',login_user=cur_user.username,rt_area=json.dumps(rt_area),rt_result=json.dumps(rt_result),rt_cname=mycname,rt_project=project,rt_date=mydate)

@cdn_blueprint.route('/domainadmin/')
def domainadmin():
    cur_user = get_current_user()
    return render_template('domainadmin.html',login_user=cur_user.username)

@cdn_blueprint.route('/projectamdin/')
def projectadmin():
    cur_user = get_current_user()
    projects = Project.query.all()
    return render_template('projectadmin.html',login_user=cur_user.username,projects=projects)

@cdn_blueprint.route('/priceinfo/')
def priceinfo():
    cur_user = get_current_user()
    prices = Charge_info.query.all()
    return render_template('priceinfo.html',login_user=cur_user.username,prices=prices)

def check_projectname(projectname):
    if len(projectname)<30:
        return (True,u'添加项目成功!')
'''
新建项目
'''
@cdn_blueprint.route('/project/add/', methods=['POST'])          #将url path=/user/add的post请求交由add_user处理
def add_project():
    projectname = request.form.get('projectname', '')
       #检查用户信息
    _is_ok, _error = check_projectname(projectname)

    if _is_ok:
        new_project = Project()
        new_project.project_name = projectname
        db.session.add(new_project)
        db.session.commit()
    return json.dumps({'is_ok':_is_ok, "error":_error})

'''
修改项目
'''
@cdn_blueprint.route('/project/update/', methods=['POST'])          #将url path=/user/add的post请求交由add_user处理
def update_project():
    projectid = request.form.get('id', '')
    #获取表单上的项目名称projectname
    projectname = request.form.get('projectname','')
    pro = Project.query.filter_by(id=projectid).one()
    #从数据库查询原始项目名称new_projectname
    new_projectname = pro.project_name
    check_projectname_isexists = Project.query.filter_by(project_name=projectname).all()
    #如果查询当前填入的项目名称存在数据库当中，且修改了项目名称，则提示项目名称已经存在。
    if check_projectname_isexists and not projectname == new_projectname :
        return json.dumps({'is_ok':False, "error":'修改的项目名已存在，操作失败!'})
    if projectname == new_projectname:
        return json.dumps({'is_ok':False, "error":'项目名称没有变化!'})
    else:
        Project.query.filter_by(id=projectid).update({'project_name':projectname})
        db.session.commit()
        return json.dumps({'is_ok':True, "error":'修改成功!'})

@cdn_blueprint.route('/project/delete/', methods=['GET'])
def delete_project():
    pid = request.args.get('id')
    pro = Project.query.filter_by(id=pid).first()
    print pro
    db.session.delete(pro)
    db.session.commit()
    flash('删除项目成功!',category='success')
    return redirect(url_for('cdn.projectadmin'))


@cdn_blueprint.route('/post/<int:post_id>', methods=('GET', 'POST'))
def post(post_id):
    form = CommentForm()
    if form.validate_on_submit():
        new_comment = Comment()
        new_comment.name = form.name.data
        new_comment.text = form.text.data
        new_comment.post_id = post_id
        new_comment.date = datetime.datetime.now()

        db.session.add(new_comment)
        db.session.commit()

    post = Post.query.get_or_404(post_id)
    tags = post.tags
    comments = post.comments.order_by(Comment.date.desc()).all()
    recent, top_tags = sidebar_data()

    return render_template(
        'post.html',
        post=post,
        tags=tags,
        comments=comments,
        recent=recent,
        top_tags=top_tags,
        form=form
    )

@cdn_blueprint.route('/new', methods=['GET', 'POST'])
@login_required
def new_post():
    form = PostForm()
    print current_user

    if form.validate_on_submit():
        new_post = Post(form.title.data)
        new_post.text = form.text.data
        new_post.publish_date = datetime.datetime.now()
        new_post.user = User.query.filter_by(
            username=current_user.username
        ).one()

        db.session.add(new_post)
        db.session.commit()


    return render_template('new.html', form=form)


@cdn_blueprint.route('/edit/<int:id>', methods=['GET', 'POST'])
@login_required
def edit_post(id):
    post = Post.query.get_or_404(id)

    permission = Permission(UserNeed(post.user.id))
    print permission.can()

    # We want admins to be able to edit any post
    if permission.can() or admin_permission.can():
        form = PostForm()

        if form.validate_on_submit():
            post.title = form.title.data
            post.text = form.text.data
            post.publish_date = datetime.datetime.now()

            db.session.add(post)
            db.session.commit()

            return redirect(url_for('.post', post_id=post.id))

        form.text.data = post.text

        return render_template('edit.html', form=form, post=post)

    abort(403)
if __name__ == '__main__':
    print get_price()
